import argparse
import os
import pickle
import time

from PIL import Image, ImageDraw
import numpy as np
import utils as u
from sklearn.cluster import DBSCAN
import cv2
import predict_kitti as util
from keras import backend as K
from keras.layers import Input
from keras.models import Model
import keras_frcnn.resnet as nn
from keras_frcnn import roi_helpers


class detect:
    img_path = 'F:/python_workplace/project/keras_frcnn-master/data/predict/test.jpg'  # 检测请修改这个
    img_save_path = 'F:/python_workplace/project/keras_frcnn-master/data/predict/results/test_步长为100.png'  # 检测请修改这个
    slice_path = 'F:/python_workplace/project/keras_frcnn-master/data/predict/processing'
    length = 256  # 长
    width = 256  # 宽
    stride = 100  # 步长
    detect_dir = 'F:/python_workplace/project/keras_frcnn-master/data/predict/processing/test'  # 检测请修改这个，最后一个需要手动改为图名

    def getImg(self):
        img = Image.open(self.img_path)
        return img

    def slice(self, img):
        """
        将输入的图片切块
        :param img:
        :return:
        """
        img_name = (self.img_path.split('/')[-1]).split('.')[0]
        slice_path = self.slice_path + '/' + img_name
        self.detect_dir = slice_path  # 设置检测图片所在文件夹
        u.mkdir(slice_path)
        x = img.size[0]
        y = img.size[1]
        round_num = (y - self.width) / self.stride + 2  # 轮数，为进度条做准备
        count = 0
        x_detect = 0
        y_detect = 0
        flag1 = True
        flag2 = True
        while (flag1):
            while (flag2):
                if x_detect + self.length < x:
                    roi = img.crop((x_detect, y_detect, x_detect + self.length, y_detect + self.width))
                    to_path = slice_path + '/' + img_name + '_' + str(x_detect) + '_' + str(y_detect) + '.png'
                    roi.save(to_path, 'png')
                    x_detect += self.stride
                else:
                    roi = img.crop((x - self.length, y_detect, x, y_detect + self.width))
                    to_path = slice_path + '/' + img_name + '_' + str(x - self.length) + '_' + str(y_detect) + '.png'
                    roi.save(to_path, 'png')
                    x_detect = 0
                    y_detect += self.stride
                    flag2 = False
            count += 1
            print('切片完成进度：' + str((count / round_num)*100) + '%' + '\r')
            if y_detect + self.width < y:
                flag2 = True
            else:
                y_detect = y - self.width
                while x_detect + self.length < x:
                    roi = img.crop((x_detect, y_detect, x_detect + self.length, y_detect + self.width))
                    to_path = slice_path + '/' + img_name + '_' + str(x_detect) + '_' + str(y_detect) + '.png'
                    roi.save(to_path, 'png')
                    x_detect += self.stride

                roi = img.crop((x - self.length, y_detect, x, y_detect + self.width))
                to_path = slice_path + '/' + img_name + '_' + str(x - self.length) + '_' + str(y_detect) + '.png'
                roi.save(to_path, 'png')

                flag1 = False
        print('切片完成')

    def predict_SinglePic(self, img_path, model_rpn, model_classifier_only, cfg, class_mapping):
        """
        该函数，预测单个图片中的舰船，返回一个二维数组，其中一维数组[xmin,ymin,xmax,ymax]
        x,y为识别框中心点位置,length为框长,width为框宽
        :param pic_path:
        :return:二维数组
        """
        img = cv2.imread(img_path)
        if img is None:
            print('reading image failed.')
            exit(0)
        X, ratio = util.format_img(img, cfg)
        if K.image_dim_ordering() == 'tf':
            X = np.transpose(X, (0, 2, 3, 1))

        # get the feature maps and output from the RPN
        [Y1, Y2, F] = model_rpn.predict(X)

        # this is result contains all boxes, which is [x1, y1, x2, y2]
        result = roi_helpers.rpn_to_roi(Y1, Y2, cfg, K.image_dim_ordering(), overlap_thresh=0.7)

        # convert from (x1,y1,x2,y2) to (x,y,w,h)
        result[:, 2] -= result[:, 0]
        result[:, 3] -= result[:, 1]
        bbox_threshold = 0.8

        # apply the spatial pyramid pooling to the proposed regions
        boxes = dict()
        for jk in range(result.shape[0] // cfg.num_rois + 1):
            rois = np.expand_dims(result[cfg.num_rois * jk:cfg.num_rois * (jk + 1), :], axis=0)
            if rois.shape[1] == 0:
                break
            if jk == result.shape[0] // cfg.num_rois:
                # pad R
                curr_shape = rois.shape
                target_shape = (curr_shape[0], cfg.num_rois, curr_shape[2])
                rois_padded = np.zeros(target_shape).astype(rois.dtype)
                rois_padded[:, :curr_shape[1], :] = rois
                rois_padded[0, curr_shape[1]:, :] = rois[0, 0, :]
                rois = rois_padded

            [p_cls, p_regr] = model_classifier_only.predict([F, rois])

            for ii in range(p_cls.shape[1]):
                if np.max(p_cls[0, ii, :]) < bbox_threshold or np.argmax(p_cls[0, ii, :]) == (p_cls.shape[2] - 1):
                    continue

                cls_num = np.argmax(p_cls[0, ii, :])
                if cls_num not in boxes.keys():
                    boxes[cls_num] = []
                (x, y, w, h) = rois[0, ii, :]
                try:
                    (tx, ty, tw, th) = p_regr[0, ii, 4 * cls_num:4 * (cls_num + 1)]
                    tx /= cfg.classifier_regr_std[0]
                    ty /= cfg.classifier_regr_std[1]
                    tw /= cfg.classifier_regr_std[2]
                    th /= cfg.classifier_regr_std[3]
                    x, y, w, h = roi_helpers.apply_regr(x, y, w, h, tx, ty, tw, th)
                except Exception as e:
                    print(e)
                    pass
                boxes[cls_num].append(
                    [cfg.rpn_stride * x, cfg.rpn_stride * y, cfg.rpn_stride * (x + w), cfg.rpn_stride * (y + h),
                     np.max(p_cls[0, ii, :])])
        # add some nms to reduce many boxes
        for cls_num, box in boxes.items():  # 只有一个类别,box只有一个大列表，二维[[288, 0, 320, 32, 0.8337128], [288, 384, 320, 448, 0.92706233], [32, 336, 64, 384, 0.8994299]]
            boxes_nms = roi_helpers.non_max_suppression_fast(box, overlap_thresh=0.5)
            boxes[cls_num] = boxes_nms
            result_r = np.zeros((len(boxes_nms), 4))
            count_boxes = 0
            for b in boxes_nms:
                b[0], b[1], b[2], b[3] = get_real_coordinates(ratio, b[0], b[1], b[2], b[3])
                result_r[count_boxes][0] = b[0]
                result_r[count_boxes][1] = b[1]
                result_r[count_boxes][2] = b[2]
                result_r[count_boxes][3] = b[3]
                count_boxes += 1
            return result_r

    def predict_dir(self, args_):
        """
        预测所有图片中的舰船，获得一个总的二维数组
        :return:总的二维数组
        """
        path = args_.path
        with open('config2.pickle', 'rb') as f_in:  # 训练时的设置，更改这里可以更改预测模型
            cfg = pickle.load(f_in)
        cfg.use_horizontal_flips = False
        cfg.use_vertical_flips = False
        cfg.rot_90 = False

        class_mapping = cfg.class_mapping
        if 'bg' not in class_mapping:
            class_mapping['bg'] = len(class_mapping)

        class_mapping = {v: k for k, v in class_mapping.items()}
        input_shape_img = (None, None, 3)
        input_shape_features = (None, None, 1024)

        img_input = Input(shape=input_shape_img)
        roi_input = Input(shape=(cfg.num_rois, 4))
        feature_map_input = Input(shape=input_shape_features)

        shared_layers = nn.nn_base(img_input, trainable=True)

        # define the RPN, built on the base layers
        num_anchors = len(cfg.anchor_box_scales) * len(cfg.anchor_box_ratios)
        rpn_layers = nn.rpn(shared_layers, num_anchors)
        classifier = nn.classifier(feature_map_input, roi_input, cfg.num_rois, nb_classes=len(class_mapping),
                                   trainable=True)
        model_rpn = Model(img_input, rpn_layers)
        model_classifier_only = Model([feature_map_input, roi_input], classifier)

        model_classifier = Model([feature_map_input, roi_input], classifier)

        print('Loading weights from {}'.format(cfg.model_path))
        model_rpn.load_weights(cfg.model_path, by_name=True)
        model_classifier.load_weights(cfg.model_path, by_name=True)

        model_rpn.compile(optimizer='sgd', loss='mse')
        model_classifier.compile(optimizer='sgd', loss='mse')

        li = np.array([[0, 0, 0, 0]]).tolist()  # 第一维是个填充数组
        l = list(li)
        count = 0
        total_pic = len(os.listdir(path))
        count_pic = 0
        if os.path.isdir(path):
            for idx, img_name in enumerate(sorted(os.listdir(path))):
                if not img_name.lower().endswith(('.bmp', '.jpeg', '.jpg', '.png', '.tif', '.tiff')):
                    continue
                x = int(img_name.split('_')[1])
                y = int(str(img_name.split('_')[2]).split('.')[0])
                # print(img_name + ',' + str(x) + ',' + str(y))

                array = self.predict_SinglePic(os.path.join(path, img_name), model_rpn,
                                               model_classifier_only, cfg, class_mapping)
                if array is None:
                    # print("空！")
                    count_pic += 1
                    print("检测进度：" + str((count_pic / total_pic) * 100) + '%' + '\r')
                    continue

                for i in array:
                    if count == 0:
                        l[0][0] = i[0] + x  # xmin
                        l[0][1] = i[1] + y  # ymin
                        l[0][2] = i[2] + x  # xmax
                        l[0][3] = i[3] + y  # ymax
                        count += 1
                    else:
                        i[0] += x
                        i[1] += y
                        i[2] += x
                        i[3] += y
                        l.append(i)
                count_pic += 1
                print("检测进度：" + str((count_pic/total_pic)*100) + '%' + '\r')

        elif os.path.isfile(path):
            print('predict image from {}'.format(path))
            pic_name = path.split('/')[-1]
            x = int(pic_name.split('_')[1])
            y = int(str(pic_name.split('_')[2]).split('.')[0])
            print(pic_name + ',' + str(x) + ',' + str(y))

            array = self.predict_SinglePic(path, model_rpn, model_classifier_only, cfg, class_mapping)
            if array is not None:
                count = 0
                for i in array:
                    if count == 0:
                        l[0][0] = i[0] + x
                        l[0][1] = i[1] + y
                        l[0][2] = i[2] + x
                        l[0][3] = i[3] + y
                        count += 1
                    else:
                        i[0] += x
                        i[1] += y
                        i[2] += x
                        i[3] += y
                        l.append(i)

        deal(l)
        return l

    def cluster(self, matrix):
        """
        输入二维数组，其中一维数组[x,y,length,width]
        返回一个聚类后的二维数组
        :param matrix:
        :return:
        """
        print('聚类计算中')
        result = list(np.zeros((2, 4), dtype=np.int))
        temp = []
        dic = {}  # 存放分类信息 key：类别，value：二维数组，其中一维数组[x,y,length,width]，前两维是个填充数组
        for array in matrix:
            temp.append([array[0], array[1]])
        temp = np.array(temp)
        db = DBSCAN(eps=15, min_samples=2).fit(temp)  # dbscan聚类
        for i in range(len(matrix)):
            if db.labels_[i] not in dic:
                dic[db.labels_[i]] = list(np.zeros((2, 4), dtype=np.int))
                dic[db.labels_[i]].append(matrix[i])
            else:
                dic[db.labels_[i]].append(matrix[i])

        for key in dic:
            size = len(dic[key]) - 2
            x = 0
            y = 0
            length = 0
            width = 0
            for i in range(2, len(dic[key])):
                x += dic[key][i][0]
                y += dic[key][i][1]
                length += dic[key][i][2]
                width += dic[key][i][3]
            result.append(
                [x // size, y // size, length // size, width // size])  # 二维数组，其中一维数组[x,y,length,width]，前两维是个填充数组
        return result

    def draw_detectPic(self, matrix):
        """
        该函数用来绘制预测框，输入一个二维的数组，其中一维数组[x,y,length,width]
        x,y为识别框中心点位置,length为框长,width为框宽，并且保存
        :param matrix:
        :return:
        """
        img = self.getImg()
        draw = ImageDraw.Draw(img)
        for frame in matrix:
            draw.rectangle([(frame[0] - frame[2] / 2), (frame[1] - frame[3] / 2),
                            (frame[0] + frame[2] / 2), (frame[1] + frame[3] / 2)], outline=(0, 255, 0))
        img.show()
        img.save(self.img_save_path, 'png')


def get_real_coordinates(ratio, x1, y1, x2, y2):  # 功能函数
    real_x1 = int(round(x1 // ratio))
    real_y1 = int(round(y1 // ratio))
    real_x2 = int(round(x2 // ratio))
    real_y2 = int(round(y2 // ratio))

    return real_x1, real_y1, real_x2, real_y2


def getarray(li):  # 功能函数，去除列表的最后一维
    result = [0, 0, 0, 0]
    for i in range(0, 4):
        result[i] = li[i]
    return result


def deal(matrix): # 输入二维矩阵，将xmin,ymin,xmax,ymax变为x,y,length,width
    for array in matrix:
        x = (array[0] + array[2])/2
        y = (array[1] + array[3])/2
        length = array[2] - array[0]
        width = array[3] - array[1]
        array[0] = x
        array[1] = y
        array[2] = length
        array[3] = width


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--path', '-p', default=detect.detect_dir, help='image path')
    return parser.parse_args()


if __name__ == '__main__':
    start_time = time.time()
    args = parse_args()
    tool = detect()
    # img = detect.getImg(tool)  # 切片完成后再测试可以注释掉
    # tool.slice(img)  # 切片完成后再测试可以注释掉
    matrix = tool.predict_dir(args)
    # matrix = tool.cluster(matrix)  # 聚类开关，注释掉就不会使用聚类
    end_time = time.time()
    print('运行时间：'+ str(end_time - start_time) + ' s')
    tool.draw_detectPic(matrix)
    # tool.cluster([[50, 50, 100, 100], [100, 100, 50, 50], [60, 60, 100, 100]])
