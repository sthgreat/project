import argparse
import os
import pickle
import time
import colorsys
from keras.models import load_model
from yolo import YOLO, detect_video
from PIL import Image, ImageDraw, ImageFont
import numpy as np
import utils as u
from sklearn.cluster import DBSCAN
import cv2
from keras import backend as K
from keras.layers import Input
from keras.models import Model
from yolo3.model import yolo_eval, yolo_body, tiny_yolo_body
from yolo3.utils import letterbox_image
import os


class detect:
    length = 416  # 长
    width = 416  # 宽
    stride = 80  # 步长
    img_path = 'F:/python_workplace/project/keras-yolo3-master/data/predict/test2.jpg'  # 检测请修改这个
    img_save_path = 'F:/python_workplace/project/keras-yolo3-master/data/predict/results/test2_' \
                    + str(stride) + '_' + str(length) + '_1.png'  # 检测请修改这个
    slice_path = 'F:/python_workplace/project/keras-yolo3-master/data/predict/processing'
    detect_dir = 'F:/python_workplace/project/keras-yolo3-master/data/predict/processing/test2'  # 检测请修改这个，最后一个需要手动改为图名

    def __init__(self):
        self.model_image_size = (416, 416)  # 训练时候训练集图片的大小（可修改）
        self.sess = K.get_session()  # 暂时不知道什么用
        self.model_path = 'model/trained_weights_final.h5'  # 要使用的模型的位置（可修改）
        self.classes_path = 'model_data/my_class.txt'  # 分类类别设置文件（可修改）
        self.anchors_path = 'model_data/yolo_anchors.txt'  # 预选框位置设置文件（可修改）
        self.score = 0.3  # 设置置信度，置信度大于0.3会被识别
        self.iou = 0.45  # 设置iou值

        self.class_names = self._get_class()  # 代码用到的变量，无需修改
        self.anchors = self._get_anchors()  # 代码用到的变量，无需修改
        self.boxes, self.scores, self.classes = self.generate()  # 代码用到的变量，无需修改

    def _get_class(self):
        classes_path = os.path.expanduser(self.classes_path)
        with open(classes_path) as f:
            class_names = f.readlines()
        class_names = [c.strip() for c in class_names]
        return class_names

    def _get_anchors(self):
        anchors_path = os.path.expanduser(self.anchors_path)
        with open(anchors_path) as f:
            anchors = f.readline()
        anchors = [float(x) for x in anchors.split(',')]
        return np.array(anchors).reshape(-1, 2)

    def generate(self):
        model_path = os.path.expanduser(self.model_path)
        assert model_path.endswith('.h5'), 'Keras model or weights must be a .h5 file.'

        # Load model, or construct model and load weights.
        num_anchors = len(self.anchors)
        num_classes = len(self.class_names)
        is_tiny_version = num_anchors == 6  # default setting
        try:
            self.yolo_model = load_model(model_path, compile=False)
        except:
            self.yolo_model = tiny_yolo_body(Input(shape=(None, None, 3)), num_anchors // 2, num_classes) \
                if is_tiny_version else yolo_body(Input(shape=(None, None, 3)), num_anchors // 3, num_classes)
            self.yolo_model.load_weights(self.model_path)  # make sure model, anchors and classes match
        else:
            assert self.yolo_model.layers[-1].output_shape[-1] == \
                   num_anchors / len(self.yolo_model.output) * (num_classes + 5), \
                'Mismatch between model and given anchor and class sizes'

        print('{} model, anchors, and classes loaded.'.format(model_path))

        # Generate colors for drawing bounding boxes.
        hsv_tuples = [(x / len(self.class_names), 1., 1.)
                      for x in range(len(self.class_names))]
        self.colors = list(map(lambda x: colorsys.hsv_to_rgb(*x), hsv_tuples))
        self.colors = list(
            map(lambda x: (int(x[0] * 255), int(x[1] * 255), int(x[2] * 255)),
                self.colors))
        np.random.seed(10101)  # Fixed seed for consistent colors across runs.
        np.random.shuffle(self.colors)  # Shuffle colors to decorrelate adjacent classes.
        np.random.seed(None)  # Reset seed to default.

        # Generate output tensor targets for filtered bounding boxes.
        self.input_image_shape = K.placeholder(shape=(2,))
        # if self.gpu_num>=2:
        #     self.yolo_model = multi_gpu_model(self.yolo_model, gpus=self.gpu_num)
        boxes, scores, classes = yolo_eval(self.yolo_model.output, self.anchors,
                                           len(self.class_names), self.input_image_shape,
                                           score_threshold=self.score, iou_threshold=self.iou)
        return boxes, scores, classes

    def getImg(self):
        img = Image.open(self.img_path)
        return img

    def slice(self, img):
        """
        将输入的图片切块
        :param img:
        :return:
        """
        img_name = (self.img_path.split('/')[-1]).split('.')[0]
        slice_path = self.slice_path + '/' + img_name
        self.detect_dir = slice_path  # 设置检测图片所在文件夹
        u.mkdir(slice_path)
        x = img.size[0]
        y = img.size[1]
        round_num = (y - self.width) / self.stride + 2  # 轮数，为进度条做准备
        count = 0
        x_detect = 0
        y_detect = 0
        flag1 = True
        flag2 = True
        while (flag1):
            while (flag2):
                if x_detect + self.length < x:
                    roi = img.crop((x_detect, y_detect, x_detect + self.length, y_detect + self.width))
                    to_path = slice_path + '/' + img_name + '_' + str(x_detect) + '_' + str(y_detect) + '.png'
                    roi.save(to_path, 'png')
                    x_detect += self.stride
                else:
                    roi = img.crop((x - self.length, y_detect, x, y_detect + self.width))
                    to_path = slice_path + '/' + img_name + '_' + str(x - self.length) + '_' + str(y_detect) + '.png'
                    roi.save(to_path, 'png')
                    x_detect = 0
                    y_detect += self.stride
                    flag2 = False
            count += 1
            print('切片完成进度：' + str((count / round_num) * 100) + '%' + '\r')
            if y_detect + self.width < y:
                flag2 = True
            else:
                y_detect = y - self.width
                while x_detect + self.length < x:
                    roi = img.crop((x_detect, y_detect, x_detect + self.length, y_detect + self.width))
                    to_path = slice_path + '/' + img_name + '_' + str(x_detect) + '_' + str(y_detect) + '.png'
                    roi.save(to_path, 'png')
                    x_detect += self.stride

                roi = img.crop((x - self.length, y_detect, x, y_detect + self.width))
                to_path = slice_path + '/' + img_name + '_' + str(x - self.length) + '_' + str(y_detect) + '.png'
                roi.save(to_path, 'png')

                flag1 = False
        print('切片完成')

    def predict_SinglePic(self, image):
        """
        该函数，预测单个图片中的舰船，返回一个二维数组，其中一维数组[xmin,ymin,xmax,ymax][left,top,right,bottom]
        x,y为识别框中心点位置,length为框长,width为框宽
        :param pic_path:
        :return:二维数组
        """
        if self.model_image_size != (None, None):
            assert self.model_image_size[0] % 32 == 0, 'Multiples of 32 required'
            assert self.model_image_size[1] % 32 == 0, 'Multiples of 32 required'
            boxed_image = letterbox_image(image, tuple(reversed(self.model_image_size)))
        else:
            new_image_size = (image.width - (image.width % 32),
                              image.height - (image.height % 32))
            boxed_image = letterbox_image(image, new_image_size)
        image_data = np.array(boxed_image, dtype='float32')

        # print(image_data.shape)
        image_data /= 255.
        image_data = np.expand_dims(image_data, 0)  # Add batch dimension.

        out_boxes, out_scores, out_classes = self.sess.run(
            [self.boxes, self.scores, self.classes],
            feed_dict={
                self.yolo_model.input: image_data,
                self.input_image_shape: [image.size[1], image.size[0]],
                K.learning_phase(): 0
            })

        print('Found {} boxes for {}'.format(len(out_boxes), 'img'))

        font = ImageFont.truetype(font='font/FiraMono-Medium.otf',
                                  size=np.floor(3e-2 * image.size[1] + 0.5).astype('int32'))
        thickness = (image.size[0] + image.size[1]) // 300

        result = list(np.array([[0, 0, 0, 0]]).tolist())  # result第一行为填充数组，创建一个二维数组

        for i, c in reversed(list(enumerate(out_classes))):
            predicted_class = self.class_names[c]
            box = out_boxes[i]
            score = out_scores[i]

            label = '{} {:.2f}'.format(predicted_class, score)
            draw = ImageDraw.Draw(image)
            label_size = draw.textsize(label, font)

            top, left, bottom, right = box
            top = max(0, np.floor(top + 0.5).astype('int32'))
            left = max(0, np.floor(left + 0.5).astype('int32'))
            bottom = min(image.size[1], np.floor(bottom + 0.5).astype('int32'))
            right = min(image.size[0], np.floor(right + 0.5).astype('int32'))
            print(label, (left, top), (right, bottom))  # 数据类型 numpy.int32
            result.append([left, top, right, bottom])
        print(result)
        return result

    def predict_dir(self):
        """
        预测所有图片中的舰船，获得一个总的二维数组
        :return:总的二维数组
        """
        detect_start_time = time.time()
        li = list(np.array([[0, 0, 0, 0]]).tolist())  # 第一维是个填充数组，存放结果

        if os.path.isdir(self.detect_dir):
            for idx, img_name in enumerate(sorted(os.listdir(self.detect_dir))):
                if not img_name.lower().endswith(('.bmp', '.jpeg', '.jpg', '.png', '.tif', '.tiff')):
                    continue
                x = int(img_name.split('_')[1])
                y = int(img_name.split('_')[2].split('.')[0])
                detect_img = Image.open(self.detect_dir + '/' + img_name)
                array = self.predict_SinglePic(
                    detect_img)  # 返回一个二维数组，其中一维数组[xmin,ymin,xmax,ymax][left,top,right,bottom]，第一维为空
                if len(array) > 1:
                    for num in range(1, len(array)):
                        array[num][0] += x
                        array[num][1] += y
                        array[num][2] += x
                        array[num][3] += y
                        li.append(array[num])
                else:
                    continue
        deal(li)
        detect_end_time = time.time()
        print('检测时间： ' + str(detect_end_time - detect_start_time))
        return li

    def cluster(self, matrix):
        """
        输入二维数组，其中一维数组[x,y,length,width]
        返回一个聚类后的二维数组
        :param matrix:
        :return:
        """
        print('聚类计算中')
        result = list(np.zeros((2, 4), dtype=np.int))
        temp = []
        dic = {}  # 存放分类信息 key：类别，value：二维数组，其中一维数组[x,y,length,width]，前两维是个填充数组
        for array in matrix:
            temp.append([array[0], array[1]])
        temp = np.array(temp)
        db = DBSCAN(eps=10, min_samples=1).fit(temp)  # dbscan聚类
        for i in range(len(matrix)):
            if db.labels_[i] not in dic:
                dic[db.labels_[i]] = list(np.zeros((2, 4), dtype=np.int))
                dic[db.labels_[i]].append(matrix[i])
            else:
                dic[db.labels_[i]].append(matrix[i])

        for key in dic:
            size = len(dic[key]) - 2
            x = 0
            y = 0
            length = 0
            width = 0
            for i in range(2, len(dic[key])):
                x += dic[key][i][0]
                y += dic[key][i][1]
                length += dic[key][i][2]
                width += dic[key][i][3]
            result.append(
                [x // size, y // size, length // size, width // size])  # 二维数组，其中一维数组[x,y,length,width]，前两维是个填充数组
        return result

    def draw_detectPic(self, matrix):
        """
        该函数用来绘制预测框，输入一个二维的数组，其中一维数组[x,y,length,width]
        x,y为识别框中心点位置,length为框长,width为框宽，并且保存
        :param matrix:
        :return:
        """
        img = self.getImg()
        draw = ImageDraw.Draw(img)
        for frame in matrix:
            draw.rectangle([(frame[0] - frame[2] / 2), (frame[1] - frame[3] / 2),
                            (frame[0] + frame[2] / 2), (frame[1] + frame[3] / 2)], outline=(255, 0, 0))

        img.show()
        img.save(self.img_save_path, 'png')


def getarray(li):  # 功能函数，去除列表的最后一维
    result = [0, 0, 0, 0]
    for i in range(0, 4):
        result[i] = li[i]
    return result


def deal(matrix):  # 输入二维矩阵，将xmin,ymin,xmax,ymax变为x,y,length,width
    for array in matrix:
        x = (array[0] + array[2]) / 2
        y = (array[1] + array[3]) / 2
        length = array[2] - array[0]
        width = array[3] - array[1]
        array[0] = x
        array[1] = y
        array[2] = length
        array[3] = width


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--path', '-p', default=detect.detect_dir, help='image path')
    return parser.parse_args()


if __name__ == '__main__':
    start_time = time.time()
    # args = parse_args()
    tool = detect()
    img = detect.getImg(tool)  # 切片完成后再测试可以注释掉
    tool.slice(img)  # 切片完成后再测试可以注释掉
    matrix = tool.predict_dir()
    matrix = tool.cluster(matrix)  # 聚类开关，注释掉就不会使用聚类
    end_time = time.time()
    print('运行时间：' + str(end_time - start_time) + ' s')
    tool.draw_detectPic(matrix)

# -----------测试---------------
#     img = Image.open('F:\python_workplace\project\keras-yolo3-master\data\predict/256.jpg')
#     i = tool.predict_SinglePic(img)
